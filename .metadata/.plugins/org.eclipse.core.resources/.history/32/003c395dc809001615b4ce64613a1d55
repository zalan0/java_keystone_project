package graph;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;

import processing.core.*;
import visualization.Coordinate;

/**
 * Represents a node of the graph.
 * @author jnzastrow
 * 
 * Tracks the node's position on the visualization and contains a set of
 * edges that connect it to other nodes.  Includes a draw method to show
 * this vertex on the visualization.
 */
public class Vertex {
	private int name;  // the name of the node, represented as a number
	private PApplet parent; // information used for visualization
	private Coordinate position; // the position on the screen that this node is draw at
	private HashSet<Edge> edges; // a set of the edges that connect this node to others
	private final static float RADIUS = 5;  // size of circle to draw
	private int direction; // direction that the circle moves
	
	private String gender;
	private int grade;
	private String instrument;
	
	/**
	 * Constructs a vertex.
	 * 
	 * @param name Integer representing the name of the node.
	 * @param parent PApplet that the node will be drawn on.
	 */
	public Vertex(int name, PApplet parent) {
		this(name, "", -1, "", parent);
	}
	
	public Vertex(int name, String gender, int grade, String instrument, PApplet parent) {
		this.name = name;
		this.parent = parent;
		edges = new HashSet<Edge>();
		float x = parent.random(RADIUS, parent.width - RADIUS);
		float y = parent.random(RADIUS, parent.height - RADIUS);
		direction = Math.round(parent.random((float) 0.5, (float) 8.5));
		position = new Coordinate(x, y);
		
		this.gender = gender;
		this.grade = grade;
		this.instrument = instrument;
	}
	
	/**
	 * Gets the name of the Vertex.
	 * @return Integer representing the name of this node.
	 */
	public int name() {
		return name;
	}
	
	/**
	 * Gets the x value of the coordinates for this node.
	 * @return Float representing the horizontal coordinate to draw this node
	 */
	public float getX() {
		return position.getX();
	}
	
	/**
	 * Gets the y value of the coordinates for this node.
	 * @return Float representing the vertical coordinate to draw this node
	 */
	public float getY() {
		return position.getY();
	}
	
	public void setX(float x) {
		position.setX(x);
	}
	
	public void setY(float y) {
		position.setY(y);
	}
	
	/**
	 * Adds an edge to the HashSet containing connected edges.
	 * @param e The edge to add.
	 */
	public void addEdge(Edge e) {
		edges.add(e);
	}
	
	/**
	 * Removes an edge from the set of edges. Used for the Girvan-Newman
	 * community algorithm.
	 * 
	 * @param e Edge to be removed.
	 */
	public void removeEdge(Edge e) {
		edges.remove(e);
	}
	
	/**
	 * Gets the edges connected to this node.
	 * @return HashSet of Edges
	 */
	public HashSet<Edge> getEdges() {
		return edges;
	}
	
	/**
	 * Returns an array of neighbor nodes
	 * @return Vertex array of neighbors.
	 */
	public LinkedList<Vertex> getNeighbors() {
		LinkedList<Vertex> ret = new LinkedList<Vertex>();
		if(edges.size()>0) {
			Iterator<Edge> i = edges.iterator();
			while(i.hasNext()) {
				Edge e = i.next();
				ret.add(e.getOther(this));
			}
		}
		return ret;
	}
	
	/**
	 * For testing purposes.  Lists names of neighbor nodes.
	 * @return String containing list of neighbor nodes.
	 */
	public String printNeighbors() {
		String ret = "[";
		if(edges.size() > 0) {
			for(Vertex v: this.getNeighbors()) {
				ret += (v.name() + ", ");
			}
			ret = ret.substring(0, ret.length() - 2);
		}
		ret += "]";
		return ret;
	}
	
	/**
	 * Draws a circle on the PApplet with the name of the node to it's
	 * upper right.
	 */
	public void draw() {
		if(grade == 7) parent.fill(153, 204, 255);
		else if(grade == 8) parent.fill(255, 255, 0);
		else parent.fill(255);
		parent.ellipse(position.getX(), position.getY(), RADIUS, RADIUS);
		
		parent.textSize(RADIUS * 2);
		parent.text(name, position.getX() + RADIUS, position.getY() - RADIUS);
//		String coords = "" + position.getX() + ", " + position.getY();
//		parent.text(coords, position.getX() + RADIUS, position.getY() - RADIUS * 4);
	}

	/**
	 * Returns a string representation of the node for testing purposes.
	 */
	public String toString() {
		String ret = "";
//		ret += "Vertex[";
//		ret += "name: "
		ret += name;
//		ret += ", gender: " + gender;
//		ret += ", grade: " + grade;
//		ret += ", instrument: " + instrument;
//		ret += "]";
		return ret;
	}
}
