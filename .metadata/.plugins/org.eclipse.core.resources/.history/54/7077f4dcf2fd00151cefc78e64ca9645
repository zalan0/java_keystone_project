package graph;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import processing.core.*;

public class Vertex {
	private int name;
	private PApplet parent;
	private float positionX;
	private float positionY;
	private HashSet<Edge> edges;
	private final static int RADIUS = 20;
	private final static float VELOCITY = 1;
	
	public Vertex(int name, PApplet parent) {
		this.name = name;
		this.parent = parent;
		edges = new HashSet<Edge>();
		positionX = parent.random(RADIUS, parent.height - RADIUS);
		positionY = parent.random(RADIUS, parent.width - RADIUS);
		
	}
	
	public int name() {
		return name;
	}
	
	public float x() {
		return positionX;
	}
	
	public float y() {
		return positionY;
	}
	
	public void addEdge(Edge e) {
		edges.add(e);
	}
	
	public HashSet<Edge> getEdges() {
		return edges;
	}
	
	public Vertex[] getNeighbors() {
		Vertex[] ret = new Vertex[edges.size()];
		if(edges.size()>0) {
			Iterator<Edge> i = edges.iterator();
			int index = 0;
			while(i.hasNext()) {
				Edge e = i.next();
				ret[index] = (e.getEnd());
				index++;
			}
		}
		return ret;
	}
	
	public String printNeighbors() {
		String ret = "[";
		if(edges.size() > 0) {
			for(Vertex v: this.getNeighbors()) {
				ret += (v.name() + ", ");
			}
			ret = ret.substring(0, ret.length() - 2);
		}
		ret += "]";
		return ret;
	}
	
	public void draw() {
		parent.ellipse(positionX, positionY, RADIUS, RADIUS);
	}

	public void update() {
		// TODO Auto-generated method stub
		
		int direction = Math.round(parent.random((float) 0.5, (float) 8.5));
		
	}
}
