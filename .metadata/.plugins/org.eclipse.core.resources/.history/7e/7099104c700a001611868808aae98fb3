package visualization;

import java.util.Iterator;

import graph.Edge;
import graph.Graph;
import graph.Graphs;
import graph.Vertex;
import processing.core.PApplet;
import util.GraphLoader;

/**
 * Runs the visualization of the graph.
 * @author jnzastrow
 *
 * Extends PApplet.  Instantiates a graph and load that graph.  
 */
public class GraphVisualize extends PApplet{
	
	private Graph graph;
	private final static String graphFile = 
			"data/band_friend_network.gve"; // graph to load
			
	private boolean pause = false;
	
	/**
	 * Main method to run the applet as an application.
	 */
	public static void main(String args[] ) {
		PApplet.main(new String[] {"visualization.GraphVisualize"});
	}
	
	/**
	 * Overrides settings method from PApplet
	 * 
	 * Sets size of canvas
	 */
	public void settings() {
//		fullScreen();	// use the entire screen
		size(800,600);	// use a specific size of window
	}
	
	/**
	 * Overrides setup method from PApplet
	 * 
	 * Instantiates and loads the graph.
	 */
	public void setup() {
		graph = new Graph(this);
		
		GraphLoader.loadGraph(graph, graphFile);
		
		Graphs.girvanNewman(graph, 30);
		
		// pre-start the positioning of the nodes
//		System.out.println("Starting setLocations");
//		for(int i = 0; i < 100; i++) {
//			System.out.println(i);
//			Graphs.setLocations(graph);
//		}
//		System.out.println("finished setLocations");
	}
	
	/**
	 * draw method from PApplet that continually draws the graph.
	 */
	public void draw() {
		background(127);
//		Iterator<Edge> e = graph.getEdges().iterator();	// draw edges here
//		while(e.hasNext()) {							// for faster frame-rates
//			Edge edge = e.next();						// and to see all of the
//			edge.draw();								// edges in graph.
//		}
		Iterator<Integer> i = graph.getVertexIterator();
		while(i.hasNext()) {
			int vName = i.next();
			Vertex v = graph.getVertex(vName);
			Iterator<Edge> e = v.getEdges().iterator(); // draw edges here 
			while(e.hasNext()) {						// to see which edges
				Edge edge = e.next();					// have been removed
				edge.draw();							// by girvanNewman()
			}
			v.draw();

		}
		
		if(!pause) Graphs.setLocations(graph);
		if(mousePressed) pause = !pause;
	}
}
